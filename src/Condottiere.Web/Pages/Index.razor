@page "/"

<PageTitle>Condottiere</PageTitle>

<CascadingValue Value="gameContext">
    <CascadingValue Value="game">

        <Header>
            <HeaderContent>
                @if (game is not null && game.Map.GetBattleProvince() is not null)
                {
                    <span>
                        Battle in @game.Map.GetBattleProvince()!.Name
                    </span>
                }
            </HeaderContent>
            <Navigation>
                <button class="@linkClass" @onclick="() => map?.Open()">
                    <MapIcon />
                </button>
            </Navigation>
        </Header>

        <SlideOverMap @ref="map" OnProvinceAccepted="ProvinceChosen" />

        <div class="max-w-3xl mx-auto p-4 md:p-8">

            @if (game is not null)
            {
                <div class="flex flex-col space-y-2">

                    @foreach (var player in game.Turn.Opponents)
                    {
                        <PlayerStatus Player="player" />
                    }
                </div>


                <div class="flex flex-col space-y-4 mt-8">

                    <div class="border rounded @game.Turn.MainPlayer.Color.ToTailwindBox()">

                        <PlayerStatus Player="@game.Turn.MainPlayer" />
                    </div>
                </div>

                @if (game.Turn.IsGameEnd(gameContext))
                {
                    <span>
                        End of game
                    </span>

                    <div class="flex items-center justify-between space-x-4 mt-8">
                        <button type="button" @onclick="Exit" class="@Styles.PrimaryButton">
                            <span class="ml-2"> Exit </span>
                        </button>
                    </div>
                }
                else
                {
                    if (game.Turn.IsEndOfBattle())
                    {
                        @if (game.Turn.IsEndOfRound())
                        {
                            @*Show cards to discard for player-1*@

                            <div class="flex items-center justify-between space-x-4 mt-8">
                                <button type="button" @onclick="GoToNextRound" class="@Styles.PrimaryButton">

                                    <span class="ml-2"> New Round </span>

                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="flex items-center space-x-4 justify-center mt-2">

                                <ul role="list" class="max-w-sm md:divide-y md:divide-gray-200 dark:divide-gray-700">
                                    @foreach (var (player, position) in game.Turn.Players.Select((x, index) => (x, index + 1)))
                                    {
                                        <li class="py-1 sm:py-2">
                                            <div class="flex items-center justify-between">
                                                <span class="inline-flex items-center bg-green-100 text-green-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
                                                    <span class="w-2 h-2 mr-1 bg-green-500 rounded-full"></span>
                                                    @player.Name
                                                </span>
                                                <p class="text-sm text-gray-500 truncate dark:text-gray-400">
                                                    @player.OwnedProvinces.Count provinces
                                                </p>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                            <div class="flex items-center justify-between space-x-4 mt-8">
                                <button type="button" @onclick="GoToNextBattle" class="@Styles.PrimaryButton">

                                    <span class="ml-2"> Next battle </span>

                                </button>
                            </div>
                        }
                    }
                    else
                    {
                        if (autoplaying)
                        {
                            <span class="text-center text-red-500 text-sm">
                                @game.Turn.CurrentPlayer.Name is playing...
                            </span>
                        }
                        else
                        {
                            <div class="flex items-center justify-between space-x-4 mt-8">
                                <button type="button" @onclick="ChooseCard"
                        class="@Styles.PrimaryButton">

                                    <span class="ml-2"> PLAY </span>

                                </button>

                                <button type="button" @onclick="Pass"
                        class="@Styles.SecondaryButton">

                                    <span class="ml-2"> PASS </span>

                                </button>
                            </div>
                        }
                    }
                }


                <SlideOverBottom @ref="cardPanel" Header="Select a card to play" OnAccepted="PlayCard">
                    <div class="grid grid-cols-4 md:grid-cols-5 gap-4">

                        @foreach (var card in game.Turn.MainPlayer.Hand)
                        {
                            <CardComponent InnerCard="card" IsSelected="selectedCard == card" OnCardSelected="CardSelected" />
                        }
                    </div>
                </SlideOverBottom>
            }

        </div>
    </CascadingValue>
</CascadingValue>

@code {
    private SlideOverBottom? cardPanel;
    private SlideOverMap? map;

    private string linkClass = $"flex px-4 py-2 text-sm space-x-2 items-center font-semibold rounded-lg outline-none focus:outline-none hover:bg-{Styles.MainColor}-50 hover:text-{Styles.MainColor}-900";
    //private string linkClassMobile = $"flex items-center justify-center space-x-2 max-w-xs w-full px-4 py-2 text-sm uppercase font-semibold rounded-lg outline-none focus:outline-none hover:bg-{Styles.MainColor}-50 hover:text-{Styles.MainColor}-900";
    private string activeClass = $"text-{Styles.MainColor}-900 bg-white";

    private GameContext gameContext = new GameContext(3, withSieges: false, new SpringOptions(), new BishopOptions());
    private Game? game;

    private Card? selectedCard;

    private bool autoplaying = false;
    private bool isNewRound = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            game = new Game(gameContext);
            await ChooseCondottiero();
            StateHasChanged();
        }
    }

    private async Task ChooseCondottiero()
    {
        if (game is null)
        {
            return;
        }

        //Are there any free provinces?
        Player chooser = game.Turn.MainPlayer; // game.Turn.NextBattleChooser(gameContext);

        if (chooser.Profile == Difficulty.Human)
        {
            map?.Open(MapSelectionOption.ChooseCondottiero, game.Map.GetBattleProvince()?.Id);
        }
        else
        {
            int? provinceId = game.Map.GetMostSuitable(chooser.OwnedProvinces);
            if (provinceId.HasValue)
            {
                game.PrepareNextBattle(provinceId.Value, isNewRound);
                isNewRound = false;
                await AutoPlay();
            }
        }
    }

    private async Task ProvinceChosen(ProvinceChoosenArgs args)
    {
        if (game is null)
        {
            return;
        }

        if (args.Option == MapSelectionOption.ChooseCondottiero)
        {
            game.PrepareNextBattle(args.Province.Id, isNewRound);
            isNewRound = false;
            map?.Close();
        }

        if (args.Option == MapSelectionOption.ChoosePope)
        {
            game.PlayBishop();
            map?.Close();
        }

        await AutoPlay();
    }

    private void ChooseCard()
    {
        cardPanel?.Open();
    }

    private async Task PlayCard()
    {
        if (selectedCard is not null && game is not null)
        {
            game.Turn.MainPlayer.Play(selectedCard);
            game.Turn.NextTurn();
            cardPanel?.Close();
            await AutoPlay();
        }
    }

    private async Task Pass()
    {
        if (game is not null)
        {
            game.Turn.MainPlayer.Pass();
            game.Turn.NextTurn();
            cardPanel?.Close();
            await AutoPlay();
        }
    }

    private void CardSelected(Card card)
    {
        selectedCard = card;
    }

    private async Task AutoPlay()
    {
        autoplaying = true;
        if (game is null)
        {
            return;
        }

        if (game.Turn.IsEndOfBattle())
        {
            EndOfBattle();
            return;
        }

        while (!game.Turn.IsMainPlayerTurn)
        {
            game.AutoPlay(gameContext);
            game.Turn.NextTurn();
            await Task.Delay(1000);
            StateHasChanged();

            if (game.Turn.IsEndOfBattle())
            {
                EndOfBattle();
                break;
            }
        }

        autoplaying = false;
        StateHasChanged();
    }

    private void EndOfBattle()
    {
        if (game is null)
        {
            return;
        }

        Player? winner = game.Turn.BattleWinner(gameContext);

        if (winner is not null)
        {
            var battleProvince = game.Map.GetBattleProvince();
            if (battleProvince is not null)
            {
                game.Map.TakeControl(battleProvince, winner);
                StateHasChanged();
            }
        }
    }

    private async Task GoToNextBattle()
    {
        await ChooseCondottiero();
        StateHasChanged();
    }

    private async Task GoToNextRound()
    {
        isNewRound = true;
        await ChooseCondottiero();
        StateHasChanged();
    }

    private async Task Exit()
    {

    }
}