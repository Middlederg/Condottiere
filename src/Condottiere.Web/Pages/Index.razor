@page "/"

<PageTitle>Condottiere</PageTitle>

<CascadingValue Value="gameContext">
    <CascadingValue Value="game">

        <Header />

        <div class="max-w-3xl mx-auto p-4 md:p-8">

            @if (game is not null)
            {
                <div class="flex flex-col space-y-2">

                    @foreach (var player in game.Turn.Opponents)
                    {
                        <PlayerStatus Player="player" />
                    }
                </div>


                <div class="flex flex-col space-y-4 mt-8">

                    <div class="border rounded @game.Turn.MainPlayer.Color.ToTailwindBox()">

                        <PlayerStatus Player="@game.Turn.MainPlayer" />
                    </div>
                </div>

                <div class="flex items-center justify-between space-x-4 mt-8">
                    @if (!autoplaying)
                    {
                        <button type="button" @onclick="ChooseCard"
                        class="@Styles.PrimaryButton">

                            <span class="ml-2"> PLAY </span>

                        </button>

                        <button type="button" @onclick="Pass"
                        class="@Styles.SecondaryButton">

                            <span class="ml-2"> PASS </span>

                        </button>
                    }
                </div>

                <SlideOverBottom @ref="cardPanel" Header="Select a card to play" OnAccepted="Play">
                    <div class="grid grid-cols-4 md:grid-cols-5 gap-4">

                        @foreach (var card in game.Turn.MainPlayer.Hand)
                        {
                            <CardComponent InnerCard="card" IsSelected="selectedCard == card" OnCardSelected="CardSelected" />
                        }
                    </div>
                </SlideOverBottom>
            }

        </div>
    </CascadingValue>
</CascadingValue>

@code {
    private SlideOverBottom? cardPanel;

    private GameContext gameContext = new GameContext(6, withSieges: false, new SpringOptions(), new BishopOptions());
    private Game? game;

    private Card? selectedCard;

    private bool autoplaying = false;

    protected async override Task OnInitializedAsync()
    {
        game = new Game(gameContext);
        game.PrepareNextBattle(1);
        await AutoPlay();
    }

    private void ChooseCard()
    {
        cardPanel?.Open();
    }

    private async Task Play()
    {
        if (selectedCard is not null && game is not null)
        {
            game.Turn.MainPlayer.Play(selectedCard);
            game.Turn.NextTurn();
            cardPanel?.Close();
            await AutoPlay();
        }
    }

    private async Task Pass()
    {
        if (game is not null)
        {
            game.Turn.MainPlayer.Pass();
            game.Turn.NextTurn();
            cardPanel?.Close();
            await AutoPlay();
        }
    }

    private void CardSelected(Card card)
    {
        selectedCard = card;
    }

    private async Task AutoPlay()
    {
        autoplaying = true;
        if (game is null)
        {
            return;
        }

        if (game.Turn.IsEndOfBattle())
        {
            EndOfBattle();
            return;
        }

        while (!game.Turn.IsMainPlayerTurn)
        {
            game.AutoPlay(gameContext);
            game.Turn.NextTurn();
            await Task.Delay(1000);
            StateHasChanged();

            if (game.Turn.IsEndOfBattle())
            {
                EndOfBattle();
                break;
            }
        }

        autoplaying = false;
    }

    private void EndOfBattle()
    {
        if (game is null)
        {
            return;
        }

        Player? winner = game.Turn.BattleWinner(gameContext);

        if (winner is not null)
        {
            var battleProvince = game.Map.GetBattleProvince();
            if (battleProvince is not null)
            {
                game.Map.TakeControl(battleProvince, winner);
                //game.PrepareNextBattle(1);
                StateHasChanged();
            }
        }

    }
}