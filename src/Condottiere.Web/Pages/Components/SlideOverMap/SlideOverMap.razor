<div class="@(show ? "" : "translate-x-full") z-50 pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10 transform transition ease-in-out duration-500 sm:duration-700">
    <div class="pointer-events-auto w-screen max-w-xl">
        <div class="flex h-full flex-col overflow-y-scroll bg-white shadow-xl">
            <div class="flex-1 overflow-y-auto py-6 px-4 sm:px-6">
                @if (Game is not null)
                {
                    <div class="flex items-start justify-between">
                        <h2 class="text-lg font-medium text-gray-900" id="slide-over-title">
                            @header
                        </h2>
                        <div class="ml-3 flex h-7 items-center">
                            <button type="button" @onclick="Close"
                                class="-m-2 p-2 text-gray-400 hover:text-gray-500 @(option == MapSelectionOption.None ? "" : "hidden")">
                                <span class="sr-only">Cerrar panel</span>
                                <!-- Heroicon name: outline/x -->
                                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                 stroke-width="2" stroke="currentColor" aria-hidden="true">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div class="mt-3 text-gray-700">
                        <MapComponent Map=Game.Map OnProvinceClicked="ProvinceClicked" Option="option" />
                    </div>
                }
            </div>

            <div class="border-t border-gray-200 py-6 px-4 sm:px-6">
                @if (Game is not null)
                {
                    @if (option != MapSelectionOption.None)
                    {
                        <div class="@(selectedProvinceArgs is null ? "hidden" : "") flex items-center justify-between space-x-4">
                            <button type="button" @onclick="Accept"
                            class="@Styles.PrimaryButton">

                                <svg xmlns="http://www.w3.org/2000/svg" class="@Styles.DefaultIcon" viewBox="0 0 24 24" stroke-width="3" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                    <path d="M5 12l5 5l10 -10" />
                                </svg>

                                <span class="ml-2"> OK </span>

                            </button>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool show = false;
    private MapSelectionOption option = MapSelectionOption.None;
    private string header = "Map";
    private int? forbiddenProvinceId;

    private ProvinceClickedArgs? selectedProvinceArgs = null;

    [CascadingParameter]
    public Game Game { get; set; } = null!;

    [Parameter]
    public EventCallback<ProvinceChoosenArgs> OnProvinceAccepted { get; set; }

    private void Toggle(bool value)
    {
        show = value;
        StateHasChanged();
    }

    public void Open(MapSelectionOption option = MapSelectionOption.None, int? forbiddenProvinceId = null)
    {
        this.option = option;
        this.forbiddenProvinceId = forbiddenProvinceId;
        Toggle(value: true);
    }
    
    public void Close()
    {
        show = false;
        StateHasChanged();
    }

    private async Task Accept()
    {
        if (selectedProvinceArgs is null || (forbiddenProvinceId.HasValue && forbiddenProvinceId == selectedProvinceArgs.Province.Id))
        {
            return;
        }

        var provinceChoosenArgs = new ProvinceChoosenArgs(selectedProvinceArgs, option);
        if (option == MapSelectionOption.ChooseCondottiero)
        {
            Game.Map.PlaceCondottiero(selectedProvinceArgs.Province.Id);
        }

        if (option == MapSelectionOption.ChoosePope)
        {
            Game.Map.PlacePope(selectedProvinceArgs.Province.Id);
        }

        await OnProvinceAccepted.InvokeAsync(provinceChoosenArgs);
    }

    private void ProvinceClicked(ProvinceClickedArgs args)
    {
        selectedProvinceArgs = args;
    }
}
